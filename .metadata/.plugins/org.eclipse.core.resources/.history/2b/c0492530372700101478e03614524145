
package com.patientmis.service;

import java.util.List;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.patientmis.dto.PatientRegistrationEvent;
import com.patientmis.exception.NoDataFoundException;
import com.patientmis.exception.PatientNotFoundException;
import com.patientmis.exception.ResourceNotFoundException;
import com.patientmis.kafka.PatientKafkaProducer;
import com.patientmis.model.PatientRegistration;
import com.patientmis.repository.PatientRepository;

@Service
public class PatientService {
    private final PatientRepository patientRepository;
    private final PatientKafkaProducer kafkaProducer;

    public PatientService(PatientRepository patientRepository, PatientKafkaProducer kafkaProducer) {
	this.patientRepository = patientRepository;
	this.kafkaProducer = kafkaProducer;
    }

    public PatientRegistration registerPatient(PatientRegistration patient) {
	try {
	    PatientRegistration saved = patientRepository.save(patient);

	    PatientRegistrationEvent event = new PatientRegistrationEvent(saved.getPatientNumber(),
		    saved.getFirstName() + " " + saved.getLastName(), saved.getPhoneNumber(), saved.getEmail(),
		    saved.getCreatedAt()

	    ); 
	    kafkaProducer.SendPatientRegistration(event);

	    return saved;

	} catch (Exception e) {
	    throw new RuntimeException("An error was encountered while registering patient");
	}
    }

    public List<PatientRegistration> getAllpatients() {
	try {
	    return patientRepository.findAll();
	} catch (Exception e) {
	    throw new RuntimeException("error retriving patients");
	}
    }

    public PatientRegistration getById(Long patientNumber) {
	try {
	    Optional<PatientRegistration> patient = patientRepository.findById(patientNumber);
	    if (patient.isPresent()) {
		return patient.get();
	    } else {
		throw new PatientNotFoundException("Patient with ID " + patientNumber + " does not exist.");
	    }
	} catch (Exception e) {
	    throw new RuntimeException("Error retrieving patient: " + e.getMessage());
	}
    }

    public void deleteById(Long patientNumber) {
	try {
	    Optional<PatientRegistration> patient = patientRepository.findById(patientNumber);
	    if (patient.isPresent()) {
		patientRepository.delete(patient.get());
	    } else {
		throw new ResourceNotFoundException("Patient with ID" + patientNumber + "not found!");
	    }
	} catch (Exception e) {
	    new RuntimeException("error deleting patient");
	}

    }

    public List<PatientRegistration> searchPatientByName(String name) {
	try {
	    List<PatientRegistration> patient = patientRepository.searchByName(name);

	    if (patient.isEmpty()) {
		throw new NoDataFoundException("No patients found with the name: " + name);
	    }

	    return patient;
	} catch (Exception e) {
	    throw new RuntimeException("Error searching the patient: " + e.getMessage());
	}
    }

    public long getTotalPatients() {
	try {
	    return patientRepository.countPatient();
	} catch (Exception e) {
	    throw new RuntimeException("Error counting total number of Patients");
	}
    }

    public Page<PatientRegistration> getAllPatients(Pageable pageable) {
	try {
	    return patientRepository.findAll(pageable);
	} catch (Exception e) {
	    throw new RuntimeException("Error Retriving patients pagenated data");
	}
    }
}
