
package com.patientmis.service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.patientmis.dto.PatientRegistrationEvent;
import com.patientmis.exception.NoDataFoundException;
import com.patientmis.exception.PatientNotFoundException;
import com.patientmis.exception.ResourceNotFoundException;
import com.patientmis.kafka.KafkaProducerService;
import com.patientmis.model.PatientRegistration;
import com.patientmis.repository.PatientRepository;

@Service
public class PatientService {
    private final PatientRepository patientRepository;
    private final KafkaProducerService patientKafkaProducer;

    public PatientService(PatientRepository patientRepository, KafkaProducerService patientKafkaProducer) {
	this.patientRepository = patientRepository;
	this.patientKafkaProducer = patientKafkaProducer;
    }

    public PatientRegistration registerPatient(PatientRegistration patient) {
	try {
	    PatientRegistration saved = patientRepository.save(patient);
	    String fullName = Stream.of(saved.getFirstName(), saved.getMiddleName(), saved.getLastName())
		    .filter(Objects::nonNull).map(String::trim).filter(s -> !s.isEmpty())
		    .collect(Collectors.joining(" "));
	    
	    PatientRegistrationEvent event = new PatientRegistrationEvent(saved.getPatientNumber(), fullName,
		    saved.getPhoneNumber(), saved.getEmail(), LocalDateTime.now(), "CREATE"

	    );
	    patientKafkaProducer.SendPatientRegistration(event);

	    return saved;

	} catch (Exception e) {
	    throw new RuntimeException("An error was encountered while registering patient");
	}
    }

    public List<PatientRegistration> getAllpatients() {
	try {
	    return patientRepository.findAll();
	} catch (Exception e) {
	    throw new RuntimeException("error retriving patients");
	}
    }

    public PatientRegistration getById(Long patientNumber) {
	try {
	    Optional<PatientRegistration> patient = patientRepository.findById(patientNumber);
	    if (patient.isPresent()) {
		return patient.get();
	    } else {
		throw new PatientNotFoundException("Patient with ID " + patientNumber + " does not exist.");
	    }
	} catch (Exception e) {
	    throw new RuntimeException("Error retrieving patient: " + e.getMessage());
	}
    }

    public void deleteById(Long patientNumber) {
	try {
	    Optional<PatientRegistration> patientOpt = patientRepository.findById(patientNumber);
	    if (patientOpt.isPresent()) {
		PatientRegistration patient = patientOpt.get();

		PatientRegistrationEvent event = new PatientRegistrationEvent();
		event.setPatientNumber(patient.getPatientNumber());
		event.setFullName(patient.getFirstName() + " " + patient.getMiddleName() + " " + patient.getLastName());
		event.setPhoneNumber(patient.getPhoneNumber());
		event.setEmail(patient.getEmail());
		event.setCreatedAt(LocalDateTime.now());
		event.setEventType("DELETE");

		patientKafkaProducer.SendPatientRegistration(event);

		patientRepository.delete(patient);
	    } else {
		throw new ResourceNotFoundException("Patient with ID " + patientNumber + " not found!");
	    }
	} catch (Exception e) {
	    throw new RuntimeException("Error deleting patient: " + e.getMessage());
	}
    }

    public List<PatientRegistration> searchPatientByName(String name) {
	try {
	    List<PatientRegistration> patient = patientRepository.searchByName(name);

	    if (patient.isEmpty()) {
		throw new NoDataFoundException("No patients found with the name: " + name);
	    }

	    return patient;
	} catch (Exception e) {
	    throw new RuntimeException("Error searching the patient: " + e.getMessage());
	}
    }

    public long getTotalPatients() {
	try {
	    return patientRepository.countPatient();
	} catch (Exception e) {
	    throw new RuntimeException("Error counting total number of Patients");
	}
    }

    public Page<PatientRegistration> getAllPatients(Pageable pageable) {
	try {
	    return patientRepository.findAll(pageable);
	} catch (Exception e) {
	    throw new RuntimeException("Error Retriving patients pagenated data");
	}
    }
}
