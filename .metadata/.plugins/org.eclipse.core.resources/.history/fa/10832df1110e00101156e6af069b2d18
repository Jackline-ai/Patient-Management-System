package com.patientmis.controller;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.PagedModel;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.patientmis.exception.NoDataFoundException;
import com.patientmis.model.PatientServiceItems;
import com.patientmis.service.ServiceItemsService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/api")
public class ServiceItemController {
    private final ServiceItemsService serviceItems;
    private final PagedResourcesAssembler<PatientServiceItems> pagedAssembler;

    public ServiceItemController(ServiceItemsService serviceItems,
	    PagedResourcesAssembler<PatientServiceItems> pagedAssembler) {
	this.serviceItems = serviceItems;
	this.pagedAssembler = pagedAssembler;
    }

    @PostMapping("/createServiceItem")
    public ResponseEntity<?> createServiceItem(@RequestBody @Valid PatientServiceItems service) {
	PatientServiceItems savedService = serviceItems.createServiceItems(service);
	return ResponseEntity.status(HttpStatus.CREATED).body(savedService);
    }

    @GetMapping("/getAllServices")
    public ResponseEntity<?> getAllServices() {
	List<PatientServiceItems> services = serviceItems.getAllServices();
	if (services.isEmpty()) {
	    throw new NoDataFoundException("No services found!");
	}
	return ResponseEntity.ok(services);
    }

    @GetMapping("/getServiceById/{serviceId}")
    public ResponseEntity<?> getServiceById(@PathVariable Long serviceId) {
	Optional<PatientServiceItems> service = serviceItems.getServiceById(serviceId);
	return ResponseEntity.ok(service);
    }

    @DeleteMapping("/deleteServiceById/{serviceId}")
    public ResponseEntity<String> deleteServiceById(Long serviceId) {
	serviceItems.deleteServiceById(serviceId);
	return ResponseEntity.ok("Service deleted successfully");
    }

    @GetMapping("/searchServiceByName")
    public ResponseEntity<List<PatientServiceItems>> searchServiceByName(@RequestParam String name) {
	List<PatientServiceItems> services = serviceItems.searchServiceByName(name);
	return ResponseEntity.ok(services);
    }

    @GetMapping("/getTotalServices")
    public Map<String, Long> getTotalServices() {
	return Collections.singletonMap("totalServices", serviceItems.getTotalServices());
    }

    @GetMapping("/getservicespages")
    public ResponseEntity<?> getServices(@RequestParam(defaultValue = "0") int page,
	    @RequestParam(defaultValue = "10") int size, @RequestParam(defaultValue = "serviceId") String sortBy) {

	Pageable pageable = PageRequest.of(page, size, Sort.by(sortBy));
	Page<PatientServiceItems> servicesPage = serviceItems.getAllServices(pageable);

	if (servicesPage.isEmpty()) {
	    return ResponseEntity.noContent().build();
	}
	PagedModel<EntityModel<PatientServiceItems>> pagedModel = pagedAssembler
		.toModel(servicesPage,
			service -> EntityModel.of(service, WebMvcLinkBuilder.linkTo(
				WebMvcLinkBuilder.methodOn(ServiceItemController.class).getServices(page, size, sortBy))
				.withSelfRel()));

	return ResponseEntity.ok(pagedModel);

    }
}
